##########################################################################
> ## Test case to check cached inverse matrix
> ##########################################################################
> ##
> ## PREPARE ##########################
> ##provide a 3x3 matrix
> m <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
> #
> #create a "cache"
> cache <- makeCacheMatrix()
> #
> #set the matrix value of the cache
> cache$set(m)
> ##
> ## CROSSCHECK #######################
> ##
> #crosscheck 1: same matrix in cache than m?
> mCache<-cache$get()
> if(!identical(m, mCache)) {
+   stop("Matrix is not the same")
+ }
> #
> #crosscheck 2: at this point the cached inverse must be null
> iCache<-cache$getInverse()
> if(!is.null(iCache)) {
+   stop("Inverse must be null")
+ }
> ##
> ## CHECK SOLVE ###########################
> ##
> # now solve first time
> s1 <- cacheSolve(cache)
> #
> #solve second time
> s2 <- cacheSolve(cache)
getting cached data
> #
> #check: s1 and s2 should be identical
> if(!identical(s1,s2)) {
+   stop("Both inverse computations must be the same")
+ }
> #
> #now cacheHits should be 1
> ##provide another 3x3 matrix
> mNew <- matrix(c(1,2,3,6,0,4,7,6,8),3,3)
> data <- cache$set(mNew)
> # NULL is expected here
> cache$getInverse()
NULL
> # TRUE is expected here
> cache$getChanged()
[1] TRUE
> s1 <- cacheSolve(cache)
> cache$getChanged()
[1] FALSE
> s2 <- cacheSolve(cache)
getting cached data
> if(!identical(s1,s2)) {
+   stop("Both inverse computations must be the same")
+ }
